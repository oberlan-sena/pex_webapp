'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _abstractSeries = require('./abstract-series');

var _abstractSeries2 = _interopRequireDefault(_abstractSeries);

var _reactUtils = require('../../utils/react-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) 2016 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var BarSeries = function (_AbstractSeries) {
  _inherits(BarSeries, _AbstractSeries);

  _createClass(BarSeries, null, [{
    key: 'propTypes',
    get: function get() {
      return _extends({}, _abstractSeries2.default.propTypes, {
        linePosAttr: _react2.default.PropTypes.string,
        valuePosAttr: _react2.default.PropTypes.string,
        lineSizeAttr: _react2.default.PropTypes.string,
        valueSizeAttr: _react2.default.PropTypes.string
      });
    }
  }]);

  function BarSeries(props) {
    _classCallCheck(this, BarSeries);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BarSeries).call(this, props));

    _this._mouseOver = _this._mouseOver.bind(_this);
    _this._mouseOut = _this._mouseOut.bind(_this);
    return _this;
  }

  _createClass(BarSeries, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._updateSeries();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._updateSeries();
    }

    /**
     * Mouseover handler. Triggers mouseover-related actions if they were set.
     * @param {Object} d Data point.
     * @private
     */

  }, {
    key: '_mouseOver',
    value: function _mouseOver(d) {
      var _props = this.props;
      var onValueMouseOver = _props.onValueMouseOver;
      var onSeriesMouseOver = _props.onSeriesMouseOver;

      if (onValueMouseOver) {
        onValueMouseOver(d, { event: _d2.default.event });
      }
      if (onSeriesMouseOver) {
        onSeriesMouseOver({ event: _d2.default.event });
      }
    }

    /**
     * Mouseout handler. Triggers mouseout-related actions if they were set.
     * @param {Object} d Data point.
     * @private
     */

  }, {
    key: '_mouseOut',
    value: function _mouseOut(d) {
      var _props2 = this.props;
      var onValueMouseOut = _props2.onValueMouseOut;
      var onSeriesMouseOut = _props2.onSeriesMouseOut;

      if (onValueMouseOut) {
        onValueMouseOut(d, { event: _d2.default.event });
      }
      if (onSeriesMouseOut) {
        onSeriesMouseOut({ event: _d2.default.event });
      }
    }
  }, {
    key: '_updateSeries',
    value: function _updateSeries() {
      var container = (0, _reactUtils.getDOMNode)(this.refs.container);
      var _props3 = this.props;
      var _stackBy = _props3._stackBy;
      var data = _props3.data;
      var lineSizeAttr = _props3.lineSizeAttr;
      var valuePosAttr = _props3.valuePosAttr;
      var linePosAttr = _props3.linePosAttr;
      var valueSizeAttr = _props3.valueSizeAttr;
      var _props4 = this.props;
      var _props4$sameTypeTotal = _props4.sameTypeTotal;
      var sameTypeTotal = _props4$sameTypeTotal === undefined ? 1 : _props4$sameTypeTotal;
      var _props4$sameTypeIndex = _props4.sameTypeIndex;
      var sameTypeIndex = _props4$sameTypeIndex === undefined ? 0 : _props4$sameTypeIndex;


      if (!data || !data.length) {
        return;
      }

      var distance = this._getScaleDistance(linePosAttr);
      var lineFunctor = this._getAttributeFunctor(linePosAttr);
      var valueFunctor = this._getAttributeFunctor(valuePosAttr);
      var value0Functor = this._getAttr0Functor(valuePosAttr);

      if (_stackBy === valuePosAttr) {
        sameTypeTotal = 1;
        sameTypeIndex = 0;
      }

      var rects = _d2.default.select(container).selectAll('rect').data(data).on('mouseover', this._mouseOver).on('mouseout', this._mouseOut);

      var itemSize = distance / 2 * 0.85;

      this._applyTransition(rects).style('opacity', this._getAttributeFunctor('opacity')).style('fill', this._getAttributeFunctor('fill') || this._getAttributeFunctor('color')).style('stroke', this._getAttributeFunctor('stroke') || this._getAttributeFunctor('color')).attr(linePosAttr, function (d) {
        return lineFunctor(d) - itemSize + itemSize * 2 / sameTypeTotal * sameTypeIndex;
      }).attr(lineSizeAttr, itemSize * 2 / sameTypeTotal).attr(valuePosAttr, function (d) {
        return Math.min(value0Functor(d), valueFunctor(d));
      }).attr(valueSizeAttr, function (d) {
        return Math.abs(-value0Functor(d) + valueFunctor(d));
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props5 = this.props;
      var data = _props5.data;
      var marginLeft = _props5.marginLeft;
      var marginTop = _props5.marginTop;

      if (!data) {
        return null;
      }
      return _react2.default.createElement(
        'g',
        {
          className: 'rv-xy-plot__series rv-xy-plot__series--bar',
          ref: 'container',
          transform: 'translate(' + marginLeft + ',' + marginTop + ')' },
        data.map(function (d, i) {
          return _react2.default.createElement('rect', { style: { opacity: 0 }, key: i });
        })
      );
    }
  }]);

  return BarSeries;
}(_abstractSeries2.default);

BarSeries.displayName = 'BarSeries';

exports.default = BarSeries;